/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 public/models/BaseWWindLighthouse.glb 
*/

import React, { useEffect, useRef, useState } from 'react';
import { Text, useGLTF } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';
import { useTheme } from 'next-themes';
export default function Model({
  windRPM = 0,
  trigger,
  lastHourRainAmount = 0,
  ...props
}) {
  const { nodes, materials } = useGLTF(
    './models/BaseWWindLighthouseBarrels.glb'
  );
  const [speed, setSpeed] = useState();
  const [barrelCount, setBarrelCount] = useState(0);
  const { resolvedTheme } = useTheme();

  const windowLights =
    resolvedTheme === 'dark' ? materials.Light : materials.Dark;

  useEffect(() => {
    if (windRPM !== undefined && windRPM !== 0) {
      setSpeed((windRPM / 60) * 2 * Math.PI);
    }
  }, [windRPM]);
  useEffect(() => {
    setBarrelCount(lastHourRainAmount);
  }, [lastHourRainAmount]);

  const ref = useRef();

  useFrame((state, delta) => {
    if (speed !== undefined) {
      ref.current.rotation.y += speed * delta;
    }
  });
  return (
    <>
      <group {...props} dispose={null} position={[0, -10.1, 0]}>
        <group
          onPointerOver={(event) => (
            event.stopPropagation(), trigger('lastHourRainAmount')
          )}
          onPointerOut={(event) => trigger('')}
        >
          <group position={[-6.776, 6.572, -3.909]} scale={0.275}>
            <mesh
              geometry={nodes.Cylinder002.geometry}
              material={materials.WoodnPlanks}
            />
            <mesh
              geometry={nodes.Cylinder002_1.geometry}
              material={materials.Brass}
            />
            <mesh
              geometry={nodes.Cylinder002_2.geometry}
              material={materials.Dark}
            />
          </group>
          {barrelCount > 0 && (
            <group
              position={[-8.068, 6.456, -6.429]}
              rotation={[0, 1.566, -3.142]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder003.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder003_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
          {barrelCount > 1 && (
            <group
              position={[-8.536, 6.456, -6.826]}
              rotation={[0, 1.195, 0]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder004.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder004_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
          {barrelCount > 2 && (
            <group
              position={[-7.964, 6.456, -7.025]}
              rotation={[0, 0.423, 0]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder005.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder005_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
          {barrelCount > 3 && (
            <group
              position={[-8.191, 7.252, -6.794]}
              rotation={[0, -0.686, 0]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder006.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder006_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
          {barrelCount > 4 && (
            <group
              position={[-7.455, 6.392, -6.633]}
              rotation={[0.026, 1.404, -1.498]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder007.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder007_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
          {barrelCount > 5 && (
            <group
              position={[-6.882, 6.592, -6.901]}
              rotation={[-0.079, 0.416, 0.193]}
              scale={0.275}
            >
              <mesh
                geometry={nodes.Cylinder008.geometry}
                material={materials.WoodnPlanks}
              />
              <mesh
                geometry={nodes.Cylinder008_1.geometry}
                material={materials.Brass}
              />
            </group>
          )}
        </group>

        <group position={[0, 5.407, 0]} scale={0.292}>
          <mesh
            geometry={nodes.uploads_files_220346_Lindau_Lighthouse_1.geometry}
            material={materials.Default}
          />
          <mesh
            geometry={nodes.uploads_files_220346_Lindau_Lighthouse_2.geometry}
            material={materials.Brass}
          />
          <mesh
            geometry={nodes.uploads_files_220346_Lindau_Lighthouse_3.geometry}
            material={windowLights}
          />
          <mesh
            geometry={nodes.uploads_files_220346_Lindau_Lighthouse_4.geometry}
            material={materials.Dark}
          />
        </group>
        <mesh
          geometry={nodes.Cylinder.geometry}
          material={materials.BrickWall}
          position={[0, 3.127, 0]}
          scale={[3.567, 2.488, 3.567]}
        />
        <mesh
          onPointerOver={(event) => (
            event.stopPropagation(), trigger('percentageHumidity')
          )}
          onPointerOut={(event) => trigger('')}
          geometry={nodes.WaterLevel.geometry}
          material={materials.LevelIndicator}
          position={[2, 4, 3]}
          rotation={[0, 0.641, 0]}
          scale={[0.024, 0.236, 0.006]}
        />
        <group
          ref={ref}
          {...props}
          onPointerOver={(event) => (
            event.stopPropagation(), trigger('windRPM')
          )}
          onPointerOut={(event) => trigger('')}
          position={[0, 13.693, 0]}
          scale={1.051}
        >
          <mesh
            geometry={nodes.Circle001.geometry}
            material={materials.Brass}
          />
          <mesh
            geometry={nodes.Circle001_1.geometry}
            material={materials.Wood}
          />
          <mesh
            geometry={nodes.Circle001_2.geometry}
            material={materials.Material}
          />
        </group>
        <mesh geometry={nodes.Cube001.geometry} material={materials.Mud} />
        <mesh geometry={nodes.Cube001_1.geometry} material={materials.Grass} />
        <mesh geometry={nodes.Cube001_2.geometry} material={materials.Grass} />
      </group>
    </>
  );
}

useGLTF.preload('./models/BaseWWindLighthouseBarrels.glb');
